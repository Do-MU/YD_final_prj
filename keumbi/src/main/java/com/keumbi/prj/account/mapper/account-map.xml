<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.keumbi.prj.account.mapper.AccountMapper">

	<!-- 해당 회원의 계좌를 모두 가져옴 -->
	<select id="selectAllAccount" resultType="AccountVO">
		SELECT 	*
		FROM 	ACCOUNTS
		WHERE 	USER_ID = #{user_id}
	</select>

	<!-- 계좌 정보를 가져옴 -->
	<select id="selectOneAccount" parameterType="AccountVO" resultType="AccountVO">
		SELECT 	*
		FROM 	ACCOUNTS
		WHERE 	FINTECH_USE_NUM = #{fintech_use_num}
	</select>

	<!-- 회원의 명의로 된 모든 계좌의 잔액을 합쳐서 return -->
	<select id="selectAccTotalSum" resultType="int">
		SELECT 	NVL( SUM( NVL(BALANCE_AMT, 0 ) ), 0 )
		FROM 	ACCOUNTS
		WHERE 	USER_ID = #{user_id}
	</select>
	
	

	<!-- 계좌 DB에 저장 -->
	<insert id="insertAccount" parameterType="AccountVO">
		INSERT INTO ACCOUNTS 	( FINTECH_USE_NUM, USER_ID, ACCOUNT_NUM_MASKED, ACCOUNT_ALIAS,
								BANK_CODE_STD, BANK_NAME, BALANCE_AMT, ACCOUNT_CODE, PRODUCT_NAME, PRD_ID )
		VALUES 					( #{fintech_use_num}, #{user_id}, #{account_num_masked}, #{account_alias},
								#{bank_code_std}, #{bank_name}, #{balance_amt}, #{account_code}, #{product_name}, #{prd_id} )
	</insert>

	<!-- 계좌의 잔액과 상품명 // account_codem prd_id를 UPDATE -->
	<update id="updateAccount" parameterType="AccountVO">
		UPDATE 	ACCOUNTS
		<set>
			<if test="balance_amt != null">BALANCE_AMT = #{balance_amt}, </if>
			<if test="product_name != null">PRODUCT_NAME = #{product_name},</if>
			<if test="account_code != null">ACCOUNT_CODE = #{account_code},</if>
			<if test="prd_id != null">PRD_ID = #{prd_id}</if>
		</set>
		WHERE FINTECH_USE_NUM = #{fintech_use_num}
	</update>

	<!-- 해당 회원의 연결된 계좌와 계좌거래 내역 삭제 -->
	<delete id="deleteAccounts" parameterType="UserVO">
		DELETE FROM ACCOUNTS
		WHERE USER_ID = #{id}
	</delete>
	
	
	
	<!-- 오픈뱅킹 API를 통해 가져온 거래내역 저장 -->
	<insert id="insertAccTrans" parameterType="AccTransVO">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT	NVL( MAX(SEQ), 0 ) + 1
			FROM	ACC_TRANS
		</selectKey>
		INSERT INTO ACC_TRANS
		VALUES ( #{seq}, #{fintech_use_num}, #{tran_date}, #{tran_time}, #{inout_type}, #{tran_type}, #{print_content}, #{tran_amt}, #{after_balance_amt}, #{branch_name} )
	</insert>
	
	<!-- 오픈뱅킹 API를 통해 가져온 거래내역 > TOTAL_TRANS로 INSERT -->
	<insert id="insertTrans" parameterType="LedgerVO">
		<selectKey keyProperty="num" resultType="int" order="BEFORE">
			SELECT 	NVL(MAX(NUM),0) + 1
			FROM 	TOTAL_TRANS
			WHERE   USER_ID = #{user_id}
			AND     TDATE = #{tdate}
		</selectKey>
		INSERT INTO TOTAL_TRANS
		VALUES ( #{tdate}, #{num}, #{user_id}, 
    			( SELECT 	CODE
    			  FROM		COMMON_CODE
    			  WHERE 	VAL = #{io_code} ), 
    			 #{content}, #{amt},
    			( SELECT 	NVL(CODE, 'D019')
    			  FROM 		COMMON_CODE
    			  WHERE 	VAL LIKE '%'||#{cat_code}||'%' )
    			)
	</insert>
	
	
	
	<!-- 예금 ID 찾기 -->
	<select id="selectPrdDep" parameterType="AccountVO" resultType="Integer">
		SELECT	NVL(DEP_ID, 0)
		FROM 	PRD_DEP_BASES
		WHERE 	FIN_PRDT_NM = #{product_name}
	</select>
	
	<!-- 적금 ID 찾기 -->
	<select id="selectPrdSav" parameterType="AccountVO" resultType="Integer">
		SELECT	NVL(SAV_ID, 0)
		FROM 	PRD_SAV_BASES
		WHERE 	FIN_PRDT_NM = #{product_name}
	</select>
	
	<!-- 대출 ID 찾기 -->
	<select id="selectPrdLoan" parameterType="AccountVO" resultType="Integer">
		SELECT	NVL(LOAN_ID, 0)
		FROM 	PRD_LOAN_BASES
		WHERE 	FIN_PRDT_NM = #{product_name}
	</select>
</mapper>